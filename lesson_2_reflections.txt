What happens when you initialize a repository? Why do you need to do it?
Git init initializes a repository of a folder and creates the .git subfolder to keep track of metadata to track commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory holds the files that you are working on. The staging area holds the files in the working directory that git will track for commits. The staging area allows git to track only certain files (not all the files in the working directory) for commits.

How can you use the staging area to make sure you have one commit per logical change?
Add file(s) to staging area that make sense as one logical change. Only commit them after running git diff to check difference in working directory and staging area and git diff --stage to check difference between staging area and last commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would be helpful when creating alternate versions rather than updated versions of the code. Branches would help by creating these alternate versions while keeping the master version available.

How do the diagrams help you visualize the branch structure?
Diagrams help show the tree of commits to their parent commits. It helps keep track of commits and how they fit in their branches and helps track commits that don't have a branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The commits of the two branches are combined into one branch. It is represented in the diagram the way it is because all the commits of the two separate branches become parents on the newly merged branch.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Pros: automatic merging means Git does most of the work and decision-making; con: Git's automatic merging isn't smart enough to figure out the best way to merge conflicts.